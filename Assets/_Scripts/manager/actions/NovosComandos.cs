//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Scripts/manager/NovosComandos.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NovosComandos: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NovosComandos()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NovosComandos"",
    ""maps"": [
        {
            ""name"": ""Cortina"",
            ""id"": ""e38f8e15-7acd-46dc-828f-34e1e46c4efe"",
            ""actions"": [
                {
                    ""name"": ""FazNada"",
                    ""type"": ""Button"",
                    ""id"": ""234f0e6d-228b-4ca6-a9ab-5a27d96f2756"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""78405e69-c5dd-4ed2-84e5-bcc7815e9e36"",
                    ""path"": ""<Keyboard>/minus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FazNada"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Cortina
        m_Cortina = asset.FindActionMap("Cortina", throwIfNotFound: true);
        m_Cortina_FazNada = m_Cortina.FindAction("FazNada", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cortina
    private readonly InputActionMap m_Cortina;
    private List<ICortinaActions> m_CortinaActionsCallbackInterfaces = new List<ICortinaActions>();
    private readonly InputAction m_Cortina_FazNada;
    public struct CortinaActions
    {
        private @NovosComandos m_Wrapper;
        public CortinaActions(@NovosComandos wrapper) { m_Wrapper = wrapper; }
        public InputAction @FazNada => m_Wrapper.m_Cortina_FazNada;
        public InputActionMap Get() { return m_Wrapper.m_Cortina; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CortinaActions set) { return set.Get(); }
        public void AddCallbacks(ICortinaActions instance)
        {
            if (instance == null || m_Wrapper.m_CortinaActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CortinaActionsCallbackInterfaces.Add(instance);
            @FazNada.started += instance.OnFazNada;
            @FazNada.performed += instance.OnFazNada;
            @FazNada.canceled += instance.OnFazNada;
        }

        private void UnregisterCallbacks(ICortinaActions instance)
        {
            @FazNada.started -= instance.OnFazNada;
            @FazNada.performed -= instance.OnFazNada;
            @FazNada.canceled -= instance.OnFazNada;
        }

        public void RemoveCallbacks(ICortinaActions instance)
        {
            if (m_Wrapper.m_CortinaActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICortinaActions instance)
        {
            foreach (var item in m_Wrapper.m_CortinaActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CortinaActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CortinaActions @Cortina => new CortinaActions(this);
    public interface ICortinaActions
    {
        void OnFazNada(InputAction.CallbackContext context);
    }
}
